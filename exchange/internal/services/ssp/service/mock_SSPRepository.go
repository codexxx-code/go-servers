// Code generated by mockery v2.46.2. DO NOT EDIT.

package service

import (
	context "context"
	model "exchange/internal/services/ssp/model"

	mock "github.com/stretchr/testify/mock"
)

// MockSSPRepository is an autogenerated mock type for the SSPRepository type
type MockSSPRepository struct {
	mock.Mock
}

// CreateSSP provides a mock function with given fields: _a0, _a1
func (_m *MockSSPRepository) CreateSSP(_a0 context.Context, _a1 model.CreateSSPReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSSP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateSSPReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSSP provides a mock function with given fields: _a0, _a1
func (_m *MockSSPRepository) DeleteSSP(_a0 context.Context, _a1 model.DeleteSSPReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSSP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DeleteSSPReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindSSPs provides a mock function with given fields: _a0, _a1
func (_m *MockSSPRepository) FindSSPs(_a0 context.Context, _a1 model.FindSSPsReq) ([]model.SSP, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindSSPs")
	}

	var r0 []model.SSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.FindSSPsReq) ([]model.SSP, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.FindSSPsReq) []model.SSP); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.FindSSPsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSSPs provides a mock function with given fields: _a0, _a1
func (_m *MockSSPRepository) GetSSPs(_a0 context.Context, _a1 model.GetSSPsReq) ([]model.SSP, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSSPs")
	}

	var r0 []model.SSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetSSPsReq) ([]model.SSP, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetSSPsReq) []model.SSP); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetSSPsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSSPsCount provides a mock function with given fields: ctx, req
func (_m *MockSSPRepository) GetSSPsCount(ctx context.Context, req model.FindSSPsReq) (int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSSPsCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.FindSSPsReq) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.FindSSPsReq) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.FindSSPsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkSSPToDSPs provides a mock function with given fields: ctx, req
func (_m *MockSSPRepository) LinkSSPToDSPs(ctx context.Context, req model.LinkSSPToDSPsReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for LinkSSPToDSPs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LinkSSPToDSPsReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlinkSSPToDSPs provides a mock function with given fields: ctx, req
func (_m *MockSSPRepository) UnlinkSSPToDSPs(ctx context.Context, req model.UnlinkSSPToDSPsReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkSSPToDSPs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UnlinkSSPToDSPsReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSSP provides a mock function with given fields: _a0, _a1
func (_m *MockSSPRepository) UpdateSSP(_a0 context.Context, _a1 model.UpdateSSPReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSSP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateSSPReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockSSPRepository creates a new instance of MockSSPRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSSPRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSSPRepository {
	mock := &MockSSPRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
