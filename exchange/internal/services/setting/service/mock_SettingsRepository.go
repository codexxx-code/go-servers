// Code generated by mockery v2.46.2. DO NOT EDIT.

package service

import (
	context "context"
	model "exchange/internal/services/setting/model"

	mock "github.com/stretchr/testify/mock"
)

// MockSettingsRepository is an autogenerated mock type for the SettingsRepository type
type MockSettingsRepository struct {
	mock.Mock
}

// GetSettings provides a mock function with given fields: _a0
func (_m *MockSettingsRepository) GetSettings(_a0 context.Context) (model.Settings, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSettings")
	}

	var r0 model.Settings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.Settings, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.Settings); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Settings)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockSettingsRepository creates a new instance of MockSettingsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSettingsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSettingsRepository {
	mock := &MockSettingsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
