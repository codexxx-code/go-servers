// Code generated by mockery v2.46.2. DO NOT EDIT.

package service

import (
	context "context"
	repository "exchange/internal/services/billing/repository"

	mock "github.com/stretchr/testify/mock"
)

// MockBillingRepository is an autogenerated mock type for the BillingRepository type
type MockBillingRepository struct {
	mock.Mock
}

// CreateDSPWinEvent provides a mock function with given fields: _a0, _a1
func (_m *MockBillingRepository) CreateDSPWinEvent(_a0 context.Context, _a1 repository.CreateDSPEventWinReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateDSPWinEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateDSPEventWinReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSSPWinEvent provides a mock function with given fields: _a0, _a1
func (_m *MockBillingRepository) CreateSSPWinEvent(_a0 context.Context, _a1 repository.CreateSSPEventWinReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSSPWinEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateSSPEventWinReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockBillingRepository creates a new instance of MockBillingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBillingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBillingRepository {
	mock := &MockBillingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
