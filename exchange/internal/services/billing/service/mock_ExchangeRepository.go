// Code generated by mockery v2.46.2. DO NOT EDIT.

package service

import (
	context "context"
	model "exchange/internal/services/exchange/model"

	mock "github.com/stretchr/testify/mock"
)

// MockExchangeRepository is an autogenerated mock type for the ExchangeRepository type
type MockExchangeRepository struct {
	mock.Mock
}

// GetAnalyticDTOs provides a mock function with given fields: _a0, _a1
func (_m *MockExchangeRepository) GetAnalyticDTOs(_a0 context.Context, _a1 model.GetAnalyticDTOsReq) ([]model.AnalyticDTO, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAnalyticDTOs")
	}

	var r0 []model.AnalyticDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAnalyticDTOsReq) ([]model.AnalyticDTO, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAnalyticDTOsReq) []model.AnalyticDTO); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AnalyticDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetAnalyticDTOsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDSPResponses provides a mock function with given fields: _a0, _a1
func (_m *MockExchangeRepository) GetDSPResponses(_a0 context.Context, _a1 model.GetDSPResponsesReq) ([]model.DSPResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDSPResponses")
	}

	var r0 []model.DSPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetDSPResponsesReq) ([]model.DSPResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetDSPResponsesReq) []model.DSPResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.DSPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetDSPResponsesReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockExchangeRepository creates a new instance of MockExchangeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExchangeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExchangeRepository {
	mock := &MockExchangeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
