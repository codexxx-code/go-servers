// Code generated by mockery v2.46.2. DO NOT EDIT.

package service

import (
	context "context"
	model "exchange/internal/services/analyticWriter/model"

	mock "github.com/stretchr/testify/mock"
)

// MockAnalyticWriterRepository is an autogenerated mock type for the AnalyticWriterRepository type
type MockAnalyticWriterRepository struct {
	mock.Mock
}

// CreateDSPBillingEventReq provides a mock function with given fields: _a0, _a1
func (_m *MockAnalyticWriterRepository) CreateDSPBillingEventReq(_a0 context.Context, _a1 model.CreateDSPBillingEventReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateDSPBillingEventReq")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateDSPBillingEventReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDSPToExchangeResponseEvent provides a mock function with given fields: _a0, _a1
func (_m *MockAnalyticWriterRepository) CreateDSPToExchangeResponseEvent(_a0 context.Context, _a1 model.CreateDSPToExchangeResponseEventReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateDSPToExchangeResponseEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateDSPToExchangeResponseEventReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateExchangeToDSPRequestEvent provides a mock function with given fields: _a0, _a1
func (_m *MockAnalyticWriterRepository) CreateExchangeToDSPRequestEvent(_a0 context.Context, _a1 model.CreateExchangeToDSPRequestEventReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateExchangeToDSPRequestEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateExchangeToDSPRequestEventReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateExchangeToSSPResponseEvent provides a mock function with given fields: _a0, _a1
func (_m *MockAnalyticWriterRepository) CreateExchangeToSSPResponseEvent(_a0 context.Context, _a1 model.CreateExchangeToSSPResponseEventReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateExchangeToSSPResponseEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateExchangeToSSPResponseEventReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSSPBillingEventReq provides a mock function with given fields: _a0, _a1
func (_m *MockAnalyticWriterRepository) CreateSSPBillingEventReq(_a0 context.Context, _a1 model.CreateSSPBillingEventReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSSPBillingEventReq")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateSSPBillingEventReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSSPToExchangeRequestEvent provides a mock function with given fields: _a0, _a1
func (_m *MockAnalyticWriterRepository) CreateSSPToExchangeRequestEvent(_a0 context.Context, _a1 model.CreateSSPToExchangeRequestEventReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSSPToExchangeRequestEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateSSPToExchangeRequestEventReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockAnalyticWriterRepository creates a new instance of MockAnalyticWriterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnalyticWriterRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnalyticWriterRepository {
	mock := &MockAnalyticWriterRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
