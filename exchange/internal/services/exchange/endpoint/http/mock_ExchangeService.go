// Code generated by mockery v2.46.2. DO NOT EDIT.

package http

import (
	mock "github.com/stretchr/testify/mock"
	context "golang.org/x/net/context"

	model "exchange/internal/services/exchange/model"

	openrtb "pkg/openrtb"
)

// MockExchangeService is an autogenerated mock type for the ExchangeService type
type MockExchangeService struct {
	mock.Mock
}

// BidSSP provides a mock function with given fields: _a0, _a1
func (_m *MockExchangeService) BidSSP(_a0 context.Context, _a1 model.SSPBidReq) (openrtb.BidResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for BidSSP")
	}

	var r0 openrtb.BidResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.SSPBidReq) (openrtb.BidResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.SSPBidReq) openrtb.BidResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(openrtb.BidResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.SSPBidReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetADM provides a mock function with given fields: _a0, _a1
func (_m *MockExchangeService) GetADM(_a0 context.Context, _a1 model.GetADMReq) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetADM")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetADMReq) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetADMReq) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetADMReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockExchangeService creates a new instance of MockExchangeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExchangeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExchangeService {
	mock := &MockExchangeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
