// Code generated by mockery v2.46.2. DO NOT EDIT.

package service

import (
	context "context"
	model "exchange/internal/services/ssp/model"

	mock "github.com/stretchr/testify/mock"
)

// MockSSPService is an autogenerated mock type for the SSPService type
type MockSSPService struct {
	mock.Mock
}

// GetSSPs provides a mock function with given fields: _a0, _a1
func (_m *MockSSPService) GetSSPs(_a0 context.Context, _a1 model.GetSSPsReq) ([]model.SSP, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSSPs")
	}

	var r0 []model.SSP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetSSPsReq) ([]model.SSP, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetSSPsReq) []model.SSP); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SSP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetSSPsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockSSPService creates a new instance of MockSSPService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSSPService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSSPService {
	mock := &MockSSPService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
