// Code generated by mockery v2.46.2. DO NOT EDIT.

package service

import (
	context "context"
	openrtb "pkg/openrtb"

	mock "github.com/stretchr/testify/mock"
)

// MockExchangeNetwork is an autogenerated mock type for the ExchangeNetwork type
type MockExchangeNetwork struct {
	mock.Mock
}

// SendBidRequestToDSP provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockExchangeNetwork) SendBidRequestToDSP(_a0 context.Context, _a1 int, _a2 string, _a3 openrtb.BidRequest) (openrtb.BidResponse, int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for SendBidRequestToDSP")
	}

	var r0 openrtb.BidResponse
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, openrtb.BidRequest) (openrtb.BidResponse, int, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, openrtb.BidRequest) openrtb.BidResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(openrtb.BidResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, openrtb.BidRequest) int); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, string, openrtb.BidRequest) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockExchangeNetwork creates a new instance of MockExchangeNetwork. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExchangeNetwork(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExchangeNetwork {
	mock := &MockExchangeNetwork{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
