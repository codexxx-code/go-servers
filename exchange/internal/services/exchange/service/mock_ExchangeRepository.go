// Code generated by mockery v2.46.2. DO NOT EDIT.

package service

import (
	context "context"
	model "exchange/internal/services/exchange/model"

	mock "github.com/stretchr/testify/mock"
)

// MockExchangeRepository is an autogenerated mock type for the ExchangeRepository type
type MockExchangeRepository struct {
	mock.Mock
}

// CreateDSPResponse provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockExchangeRepository) CreateDSPResponse(_a0 context.Context, _a1 int, _a2 model.DSPResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateDSPResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.DSPResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetADM provides a mock function with given fields: ctx, bidID
func (_m *MockExchangeRepository) GetADM(ctx context.Context, bidID string) (string, error) {
	ret := _m.Called(ctx, bidID)

	if len(ret) == 0 {
		panic("no return value specified for GetADM")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, bidID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, bidID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bidID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountryByIP provides a mock function with given fields: ipStr
func (_m *MockExchangeRepository) GetCountryByIP(ipStr string) (string, error) {
	ret := _m.Called(ipStr)

	if len(ret) == 0 {
		panic("no return value specified for GetCountryByIP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(ipStr)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(ipStr)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ipStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDSPResponses provides a mock function with given fields: _a0, _a1
func (_m *MockExchangeRepository) GetDSPResponses(_a0 context.Context, _a1 model.GetDSPResponsesReq) ([]model.DSPResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDSPResponses")
	}

	var r0 []model.DSPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetDSPResponsesReq) ([]model.DSPResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetDSPResponsesReq) []model.DSPResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.DSPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetDSPResponsesReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublisherVisibility provides a mock function with given fields: ctx, publisherID
func (_m *MockExchangeRepository) GetPublisherVisibility(ctx context.Context, publisherID string) (model.PublisherVisibility, error) {
	ret := _m.Called(ctx, publisherID)

	if len(ret) == 0 {
		panic("no return value specified for GetPublisherVisibility")
	}

	var r0 model.PublisherVisibility
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.PublisherVisibility, error)); ok {
		return rf(ctx, publisherID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.PublisherVisibility); ok {
		r0 = rf(ctx, publisherID)
	} else {
		r0 = ret.Get(0).(model.PublisherVisibility)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, publisherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PopUnusedBids provides a mock function with given fields: ctx, count
func (_m *MockExchangeRepository) PopUnusedBids(ctx context.Context, count int) ([]model.BidPointer, error) {
	ret := _m.Called(ctx, count)

	if len(ret) == 0 {
		panic("no return value specified for PopUnusedBids")
	}

	var r0 []model.BidPointer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]model.BidPointer, error)); ok {
		return rf(ctx, count)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.BidPointer); ok {
		r0 = rf(ctx, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.BidPointer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveADM provides a mock function with given fields: ctx, bidID, adm
func (_m *MockExchangeRepository) SaveADM(ctx context.Context, bidID string, adm string) error {
	ret := _m.Called(ctx, bidID, adm)

	if len(ret) == 0 {
		panic("no return value specified for SaveADM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bidID, adm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAnalyticDTOs provides a mock function with given fields: ctx, analyticDTOs
func (_m *MockExchangeRepository) SaveAnalyticDTOs(ctx context.Context, analyticDTOs []model.AnalyticDTO) error {
	ret := _m.Called(ctx, analyticDTOs)

	if len(ret) == 0 {
		panic("no return value specified for SaveAnalyticDTOs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.AnalyticDTO) error); ok {
		r0 = rf(ctx, analyticDTOs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUnusedBids provides a mock function with given fields: ctx, bids
func (_m *MockExchangeRepository) SaveUnusedBids(ctx context.Context, bids []model.BidPointer) error {
	ret := _m.Called(ctx, bids)

	if len(ret) == 0 {
		panic("no return value specified for SaveUnusedBids")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.BidPointer) error); ok {
		r0 = rf(ctx, bids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockExchangeRepository creates a new instance of MockExchangeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExchangeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExchangeRepository {
	mock := &MockExchangeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
