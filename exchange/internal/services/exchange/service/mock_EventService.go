// Code generated by mockery v2.46.2. DO NOT EDIT.

package service

import (
	context "context"
	openrtb "pkg/openrtb"

	mock "github.com/stretchr/testify/mock"
)

// MockEventService is an autogenerated mock type for the EventService type
type MockEventService struct {
	mock.Mock
}

// CreateExchangeBidRequestToDSPEvent provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockEventService) CreateExchangeBidRequestToDSPEvent(_a0 context.Context, _a1 int, _a2 openrtb.BidRequest) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateExchangeBidRequestToDSPEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, openrtb.BidRequest) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateExchangeBidResponseToSSPEvent provides a mock function with given fields: _a0, _a1
func (_m *MockEventService) CreateExchangeBidResponseToSSPEvent(_a0 context.Context, _a1 openrtb.BidResponse) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateExchangeBidResponseToSSPEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, openrtb.BidResponse) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSSPBidRequestToExchangeEvent provides a mock function with given fields: _a0, _a1
func (_m *MockEventService) CreateSSPBidRequestToExchangeEvent(_a0 context.Context, _a1 openrtb.BidRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSSPBidRequestToExchangeEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, openrtb.BidRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockEventService creates a new instance of MockEventService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventService {
	mock := &MockEventService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
