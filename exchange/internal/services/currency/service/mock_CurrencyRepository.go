// Code generated by mockery v2.46.2. DO NOT EDIT.

package service

import (
	context "context"
	model "exchange/internal/services/currency/model"

	mock "github.com/stretchr/testify/mock"
)

// MockCurrencyRepository is an autogenerated mock type for the CurrencyRepository type
type MockCurrencyRepository struct {
	mock.Mock
}

// GetCurrencies provides a mock function with given fields: _a0
func (_m *MockCurrencyRepository) GetCurrencies(_a0 context.Context) ([]model.Currency, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencies")
	}

	var r0 []model.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Currency, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Currency); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockCurrencyRepository creates a new instance of MockCurrencyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCurrencyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCurrencyRepository {
	mock := &MockCurrencyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
