// Code generated by mockery v2.46.2. DO NOT EDIT.

package endpoint

import (
	context "context"
	model "server/internal/services/prompt/model"

	mock "github.com/stretchr/testify/mock"
)

// MockPromptService is an autogenerated mock type for the PromptService type
type MockPromptService struct {
	mock.Mock
}

// CreatePrompt provides a mock function with given fields: ctx, req
func (_m *MockPromptService) CreatePrompt(ctx context.Context, req model.CreatePromptReq) (model.CreatePromptRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrompt")
	}

	var r0 model.CreatePromptRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreatePromptReq) (model.CreatePromptRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreatePromptReq) model.CreatePromptRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.CreatePromptRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreatePromptReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePrompt provides a mock function with given fields: ctx, req
func (_m *MockPromptService) DeletePrompt(ctx context.Context, req model.DeletePromptReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrompt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DeletePromptReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPrompts provides a mock function with given fields: ctx, req
func (_m *MockPromptService) GetPrompts(ctx context.Context, req model.GetPromptsReq) ([]model.Prompt, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPrompts")
	}

	var r0 []model.Prompt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetPromptsReq) ([]model.Prompt, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetPromptsReq) []model.Prompt); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Prompt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetPromptsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePrompt provides a mock function with given fields: ctx, req
func (_m *MockPromptService) UpdatePrompt(ctx context.Context, req model.UpdatePromptReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrompt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdatePromptReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockPromptService creates a new instance of MockPromptService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPromptService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPromptService {
	mock := &MockPromptService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
