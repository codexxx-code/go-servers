// Code generated by mockery v2.46.2. DO NOT EDIT.

package endpoint

import (
	context "context"
	model "generator/internal/services/promptTemplate/model"

	mock "github.com/stretchr/testify/mock"
)

// MockPromptService is an autogenerated mock type for the PromptService type
type MockPromptService struct {
	mock.Mock
}

// GetPromptTemplates provides a mock function with given fields: ctx, req
func (_m *MockPromptService) GetPromptTemplates(ctx context.Context, req model.GetPromptTemplatesReq) ([]model.PromptTemplate, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPromptTemplates")
	}

	var r0 []model.PromptTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetPromptTemplatesReq) ([]model.PromptTemplate, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetPromptTemplatesReq) []model.PromptTemplate); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PromptTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetPromptTemplatesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePromptTemplate provides a mock function with given fields: ctx, req
func (_m *MockPromptService) UpdatePromptTemplate(ctx context.Context, req model.UpdatePromptTemplateReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePromptTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdatePromptTemplateReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockPromptService creates a new instance of MockPromptService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPromptService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPromptService {
	mock := &MockPromptService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
