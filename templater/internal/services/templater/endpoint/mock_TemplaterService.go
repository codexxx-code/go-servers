// Code generated by mockery v2.46.2. DO NOT EDIT.

package endpoint

import (
	context "context"
	model "templater/internal/services/templater/model"

	mock "github.com/stretchr/testify/mock"

	openrtb "pkg/openrtb"
)

// MockTemplaterService is an autogenerated mock type for the TemplaterService type
type MockTemplaterService struct {
	mock.Mock
}

// GetTemplate provides a mock function with given fields: _a0, _a1
func (_m *MockTemplaterService) GetTemplate(_a0 context.Context, _a1 model.GetTemplateReq) (openrtb.BidResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 openrtb.BidResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetTemplateReq) (openrtb.BidResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetTemplateReq) openrtb.BidResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(openrtb.BidResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetTemplateReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTemplaterService creates a new instance of MockTemplaterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplaterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplaterService {
	mock := &MockTemplaterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
